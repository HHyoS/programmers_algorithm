#include <string>
#include <vector>
#include <queue>
#include <algorithm>
#include <iostream>

using namespace std;
int solution(vector<vector<int>> jobs) {
    int size = jobs.size();
    int time = 0;
    int run = 0;
    int aver = 0;
    for(auto j : jobs)
        aver += j[1];
    priority_queue <pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> a;
    while(true){
        if(a.empty() && jobs.empty()){
            break;
        }
        if(run == 0){
            if(!jobs.empty() && jobs.front()[0] <= time){
                if(a.empty()){
                    run = jobs.front()[1];
                    jobs.erase(jobs.begin());}
                else{
                    a.push(make_pair(jobs.front()[1],jobs.front()[0]));
                    run = a.top().first;
                    aver = aver + time - a.top().second;
                    jobs.erase(jobs.begin());
                    a.pop();
            }
        }
            else if(jobs.empty() && !a.empty()){
                run = a.top().first;
                aver = aver + time - a.top().second;
                a.pop();
            }
        }
        else if(run > 0){
            if(!jobs.empty() &&jobs.front()[0] <= time){
                a.push(make_pair(jobs.front()[1], jobs.front()[0]));
                jobs.erase(jobs.begin());
            }
                
        }
        ++time;
        --run;
    }
    
    int answer = aver / size;
    return answer;
}
