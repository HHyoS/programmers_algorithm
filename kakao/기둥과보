#include <string>
#include <vector>
#include <map>
#include <queue>

using namespace std;
vector<vector<int>> room;
bool ins_bo(vector<int> command, map<pair<int,int>,int>& gi, map<pair<int,int>,int> bo){
    int x = command[0];
    int y = command[1];
    if(x < room.size()-1 && y < room.size()-2){
        if(gi[{y,x}]==1 ||  gi[{y-1,x}] == 1 || (bo[{y,x-1}]==1 && bo[{y,x+1}] == 1)){
            bo[{y,x}]=1;
            return true;
        }
    }
    else
        return false;
}
bool ins_gidoong(vector<int>command, map<pair<int,int>,int> gi, map<pair<int,int>,int> bo){
    int x = command[0];
    int y = command[1];
    if(x < room.size()-2 && y < room.size()-1){
        if(x ==0 || gi[{y-1,x}] ==1 || bo[{y,x}] == 1 || bo[{y,x-1}] ==1){
            gi[{y,x}]=1;
            return true;
        }
    }
    else
        return false;
        
}
void del_bo(vector<int>command, map<pair<int,int>,int>& gisible, map<pair<int,int>,int>& bosible, vector<vctor<int>> temp, int a){
    bo[{y,x}] = 0;
    vector<int> aa = {x,y,1,1}
    for(int b = 0; b < a; ++b){
        if(temp[b] == aa)
            continue
        else{
            if(temp[b][3]==0)
    }
    
}
void del_gidoong(int x, int y, map<pair<int,int>,int> gisible, map<pair<int,int>,int> bosible){
    
}
vector<vector<int>> solution(int n, vector<vector<int>> build_frame) {
    vector<vector<int>> answer;
    map<pair<int,int>,int> gidoong;
    map<pair<int,int>,int> bo;
    queue<pair<int,int>> que;
    room.assign(n+2 , vector<int>(n+2, 0));
    for(int a =0; a < build_frame; ++a){
    }
    return answer;
}
